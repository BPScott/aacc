name: Snapit

on:
  issue_comment:
    types:
      - created

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  snapshot:
    name: Snapshot Release
    if: github.event.issue.pull_request && github.event.comment.body == '/snapit'
    runs-on: ubuntu-latest
    steps:
      - name: Validate pull request
        uses: actions/github-script@v6
        id: pr_data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const repoContext = {owner: context.repo.owner, repo: context.repo.repo}
            console.log(github.event);
            try {

             await github.rest.reactions.createForIssueComment({
                ...repoContext,
                comment_id: github.event.comment.id,
                content: 'eyes',
              })

             const actorPermission = (await github.rest.repos.getCollaboratorPermissionLevel({
                ...repoContext,
                username: context.actor
              })).data.permission
              const isPermitted = ['write', 'admin'].includes(actorPermission)

              if (!isPermitted) {
                await github.rest.issues.createComment({
                  ...repoContext,
                  issue_number: context.issue.number,
                  body: "Only users with write permission to the respository can run /snapit",
                })

                core.setFailed(errorMessage)
                return;
              }

              const pullRequest = await github.rest.pulls.get({
                ...repoContext,
                pull_number: context.issue.number,
              })

              // Pull request from fork
              if (context.payload.repository.full_name !== pullRequest.data.head.repo.full_name) {
                const errorMessage = '`/snapit` is not supported on pull requests from forked repositories.'

                await github.rest.issues.createComment({
                  ...repoContext,
                  issue_number: context.issue.number,
                  body: errorMessage,
                })

                core.setFailed(errorMessage)
              }
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Checkout pull request branch
        uses: actions/checkout@v2
        with:
          ref: format('refs/pull/{0}/merge', github.event.issue.number)

      # Because changeset entries are consumed and removed on the
      # 'changeset-release/main' branch, we need to reset the files
      # so the following 'changeset version --snapshot' command will
      # regenerate the package version bumps with the snapshot releases
      - name: Reset changeset entries on changeset-release/main branch
        run: |
          if [[ $(git branch --show-current) == 'changeset-release/main' ]]; then
            git checkout origin/main -- .changeset
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Create an .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF

      - name: Create and publish snapshot release
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const execa = require('execa')

            await execa.command('yarn run changeset version --snapshot snapshot-release', { stdio: 'inherit' })

            const releaseProcess = execa.command('yarn run release -- --no-git-tags --snapshot --tag snapshot-release')
            releaseProcess.stdout.pipe(process.stdout)

            const {stdout} = await releaseProcess

            const newTags = Array
              .from(stdout.matchAll(/New tag:\s+([^\s\n]+)/g))
              .map(([_, tag]) => tag)

            if (newTags.length) {
              const multiple = newTags.length > 1

              const body = (
                `ðŸ«°âœ¨ **Thanks @${context.actor}! ` +
                `Your snapshot${multiple ? 's have' : ' has'} been published to npm.**\n\n` +
                `Test the snapshot${multiple ? 's' : ''} by updating your \`package.json\` ` +
                `with the newly published version${multiple ? 's' : ''}:\n` +
                newTags.map(tag => (
                  '```sh\n' +
                  `yarn add ${tag}\n` +
                  '```'
                )).join('\n')
              )
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body,
              })

              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: github.event.comment.id,
                content: 'rocket',
              })
            }
